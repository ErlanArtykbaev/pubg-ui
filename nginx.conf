user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  60;

    include /etc/nginx/conf.d/*.conf;

    server {
        server_name DOMAIN;

        # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
        # We use ^~ here, so that we don't check other regexes (for speed-up). We actually MUST cancel
        # other regex checks, because in our other config files have regex rule that denies access to files with dotted names.
        location ^~ /.well-known/acme-challenge/ {

            # Set correct content type. According to this:
            # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
            # Current specification requires "text/plain" or no content header at all.
            # It seems that "text/plain" is a safe option.
            default_type "text/plain";

            # This directory must be the same as in /etc/letsencrypt/cli.ini
            # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
            # there to "webroot".
            # Do NOT use alias, use root! Target directory is located here:
            # /var/www/common/letsencrypt/.well-known/acme-challenge/
            root         /var/www/letsencrypt;
        }

        # Hide /acme-challenge subdirectory and return 404 on all requests.
        # It is somewhat more secure than letting Nginx return 403.
        # Ending slash is important!
        location = /.well-known/acme-challenge/ {
            return 404;
        }

        location / {
            proxy_pass http://cont1;
        }

        location /storage {
            proxy_pass http://cont2:443;
        }
    }
}